// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Migrations.Forum
{
    [DbContext(typeof(ForumContext))]
    [Migration("20230615082803_ForumInit")]
    partial class ForumInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            BirthDate = "0",
                            Cabinet = "0",
                            ConcurrencyStamp = "c8976a73-04fa-4c76-9d37-b0c215463ec4",
                            Email = "Admin@admin.by",
                            EmailConfirmed = false,
                            FirstName = "System",
                            InternalPhone = "0",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.BY",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmQy9UwxkODjbb/iQlo7ezznBC5omr0sEhFEoTgafpAxZZRFsyVCFG8NXKSc2SGJA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0200b739-835c-4088-8243-adb8d69ebf1a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccount");

                    b.HasIndex("AccountTypeId")
                        .IsUnique();

                    b.ToTable("ForumAccount", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccountType");

                    b.ToTable("ForumAccountType", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForumSubTitle")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalViews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumBase");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumBase", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(984),
                            ForumCategoryId = 1,
                            ForumSubTitle = "Test forum subtitle 1",
                            ForumTitle = "Test forum title 1",
                            ForumUserId = 1,
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(988),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 2",
                            ForumTitle = "Test forum title 2",
                            ForumUserId = 2,
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(990),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 3",
                            ForumTitle = "Test forum title 3",
                            ForumUserId = 2,
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(991),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 4",
                            ForumTitle = "Test forum title 4",
                            ForumUserId = 2,
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(993),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 5",
                            ForumTitle = "Test forum title 5",
                            ForumUserId = 2,
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(994),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 6",
                            ForumTitle = "Test forum title 6",
                            ForumUserId = 2,
                            TotalViews = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumCategory");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7644),
                            ForumUserId = 1,
                            Name = "Test category 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7646),
                            ForumUserId = 2,
                            Name = "Test category 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7648),
                            ForumUserId = 1,
                            Name = "Test category 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7649),
                            ForumUserId = 2,
                            Name = "Test category 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7650),
                            ForumUserId = 2,
                            Name = "Test category 5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(7652),
                            ForumUserId = 2,
                            Name = "Test category 6"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PostText")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumPost");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumPost", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5905),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1",
                            PostText = "ASdsad sdad asd asdas dsad asdsddddddddddddddddddddddddddd das das dasssssssssssssssssssssssssssssssssssssssssssss dsads"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5911),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1",
                            PostText = "ASdsad sdad asd asdas dsad asdsddddddddddddddddddddddddddd das das dasssssssssssssssssssssssssssssssssssssssssssss dsads"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5912),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1",
                            PostText = "ASdsad sdad asd asdas dsad asdsddddddddddddddddddddddddddd das das dasssssssssssssssssssssssssssssssssssssssssssss dsads"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5914),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1",
                            PostText = "ASdsad sdad asd asdas dsad asdsddddddddddddddddddddddddddd das das dasssssssssssssssssssssssssssssssssssssssssssss dsads"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5915),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5916),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5946),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 34,
                            PostName = "Post name 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(5948),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 65,
                            PostName = "Post name 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("TotalViews")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumTopic");

                    b.HasIndex("ForumBaseId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumTopic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4076),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4082),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1a",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4083),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1b",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4084),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1c",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4086),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 2",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4088),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 3",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4089),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 4",
                            TotalViews = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 471, DateTimeKind.Local).AddTicks(4090),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 5",
                            TotalViews = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("Karma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Surname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumUser");

                    b.ToTable("ForumUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(3737),
                            Karma = 0,
                            Lastname = "Сергеевич",
                            Name = "Константин",
                            Surname = "Феофанов"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 15, 11, 28, 3, 470, DateTimeKind.Local).AddTicks(3749),
                            Karma = 0,
                            Lastname = "Григорьевич",
                            Name = "Александр",
                            Surname = "Петров"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "1c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumAccountType", "ForumAccountType")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumAccountType_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumUser_Id");

                    b.Navigation("ForumAccountType");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumCategory", "ForumCategory")
                        .WithMany("ForumBases")
                        .HasForeignKey("ForumCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumBase_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumUser_Id");

                    b.Navigation("ForumCategory");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumUser_Id");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumPost_ForumTopicId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumPost_ForumUser_Id");

                    b.Navigation("ForumTopic");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumBase", "ForumBase")
                        .WithMany("ForumTopics")
                        .HasForeignKey("ForumBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumTopic_ForumBaseId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumUser_Id");

                    b.Navigation("ForumBase");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Navigation("ForumTopics");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Navigation("ForumBases");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
