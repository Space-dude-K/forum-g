// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Migrations.Forum
{
    [DbContext(typeof(ForumContext))]
    partial class ForumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bbde42d1-d609-4f8a-8b38-c21e6dc34efe",
                            AccessFailedCount = 0,
                            BirthDate = "24.07.2020 0:00:00",
                            Cabinet = "103",
                            ConcurrencyStamp = "25909e3c-0f2a-403c-b6b0-4a33eee9e91c",
                            Email = "G600-U0@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan0",
                            InternalPhone = "505510686",
                            LastName = "Petrov0",
                            LockoutEnabled = false,
                            PhoneNumber = "3233254331311595925519934433",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a032f9fa-4c2b-44e3-bdfc-f9050bb3d044",
                            TwoFactorEnabled = false,
                            UserName = "G600-U0"
                        },
                        new
                        {
                            Id = "75eaff78-efda-40cd-9572-95faeea51ef1",
                            AccessFailedCount = 0,
                            BirthDate = "15.07.2000 0:00:00",
                            Cabinet = "88",
                            ConcurrencyStamp = "0e1913e1-a299-4c2f-b3e0-44bf1007adce",
                            Email = "G600-U1@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan1",
                            InternalPhone = "1571008649",
                            LastName = "Petrov1",
                            LockoutEnabled = false,
                            PhoneNumber = "147722010316561249631028463220",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf5e15bb-209b-490e-b6db-0119686f1e3e",
                            TwoFactorEnabled = false,
                            UserName = "G600-U1"
                        },
                        new
                        {
                            Id = "054134b5-354f-4dd3-b1d3-681a4a15c4b1",
                            AccessFailedCount = 0,
                            BirthDate = "02.12.1996 0:00:00",
                            Cabinet = "877",
                            ConcurrencyStamp = "93a05d86-f748-420c-8b87-0c6a4c11e4d5",
                            Email = "G600-U2@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan2",
                            InternalPhone = "1048734400",
                            LastName = "Petrov2",
                            LockoutEnabled = false,
                            PhoneNumber = "200806498820912972061096593173",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6a82302-79e9-41b4-8f4e-a6010f4ec48a",
                            TwoFactorEnabled = false,
                            UserName = "G600-U2"
                        },
                        new
                        {
                            Id = "38169076-fecd-4b37-9424-4ac9d583ff9e",
                            AccessFailedCount = 0,
                            BirthDate = "27.09.2014 0:00:00",
                            Cabinet = "817",
                            ConcurrencyStamp = "b9d8edd5-25b7-43cf-b9f7-8c0525905e1c",
                            Email = "G600-U3@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan3",
                            InternalPhone = "1553677160",
                            LastName = "Petrov3",
                            LockoutEnabled = false,
                            PhoneNumber = "74726025031652140637024588",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d05e15e-68c0-44ed-a535-36e93a4a2821",
                            TwoFactorEnabled = false,
                            UserName = "G600-U3"
                        },
                        new
                        {
                            Id = "b29b2479-2165-47f0-a021-258919a8990b",
                            AccessFailedCount = 0,
                            BirthDate = "21.10.2014 0:00:00",
                            Cabinet = "688",
                            ConcurrencyStamp = "e85eac6c-6d2f-4597-8e1e-4cf9efdb415f",
                            Email = "G600-U4@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan4",
                            InternalPhone = "1579087271",
                            LastName = "Petrov4",
                            LockoutEnabled = false,
                            PhoneNumber = "14956614547104796191860146980",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3551607-82eb-4414-a51b-6af4654310b1",
                            TwoFactorEnabled = false,
                            UserName = "G600-U4"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccount");

                    b.HasIndex("AccountTypeId")
                        .IsUnique();

                    b.ToTable("ForumAccount", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccountType");

                    b.ToTable("ForumAccountType", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForumSubTitle")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumBase");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumBase", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9535),
                            ForumCategoryId = 1,
                            ForumSubTitle = "Test forum subtitle 1",
                            ForumTitle = "Test forum title 1",
                            ForumUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9538),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 2",
                            ForumTitle = "Test forum title 2",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9539),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 3",
                            ForumTitle = "Test forum title 3",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9541),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 4",
                            ForumTitle = "Test forum title 4",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9542),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 5",
                            ForumTitle = "Test forum title 5",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(9544),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 6",
                            ForumTitle = "Test forum title 6",
                            ForumUserId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumCategory");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6026),
                            ForumUserId = 1,
                            Name = "Test category 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6029),
                            ForumUserId = 2,
                            Name = "Test category 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6030),
                            ForumUserId = 1,
                            Name = "Test category 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6032),
                            ForumUserId = 2,
                            Name = "Test category 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6033),
                            ForumUserId = 2,
                            Name = "Test category 5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(6035),
                            ForumUserId = 2,
                            Name = "Test category 6"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumPost");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumPost", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(4542),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(4546),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(4547),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(4549),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 34,
                            PostName = "Post name 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(4550),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 65,
                            PostName = "Post name 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("TopicViewCounter")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumTopic");

                    b.HasIndex("ForumBaseId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumTopic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(2742),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(2747),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 2",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(2749),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 3",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(2750),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 4",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 700, DateTimeKind.Local).AddTicks(2751),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 5",
                            TopicViewCounter = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("Karma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Surname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumUser");

                    b.ToTable("ForumUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(2040),
                            Karma = 0,
                            Lastname = "Сергеевич",
                            Name = "Константин",
                            Surname = "Феофанов"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 8, 16, 32, 57, 699, DateTimeKind.Local).AddTicks(2051),
                            Karma = 0,
                            Lastname = "Григорьевич",
                            Name = "Александр",
                            Surname = "Петров"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b96ab6b0-7086-4595-b634-ebbbbcc72799",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "baf98e30-f9e3-4ec6-a7d0-93c4f36cb2ea",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumAccountType", "ForumAccountType")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumAccountType_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumUser_Id");

                    b.Navigation("ForumAccountType");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumCategory", "ForumCategory")
                        .WithMany("ForumBases")
                        .HasForeignKey("ForumCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumBase_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumUser_Id");

                    b.Navigation("ForumCategory");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumUser_Id");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumPost_ForumTopicId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumPost_ForumUser_Id");

                    b.Navigation("ForumTopic");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumBase", "ForumBase")
                        .WithMany("ForumTopics")
                        .HasForeignKey("ForumBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumTopic_ForumBaseId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumUser_Id");

                    b.Navigation("ForumBase");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Navigation("ForumTopics");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Navigation("ForumBases");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
