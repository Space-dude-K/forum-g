// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Migrations.Forum
{
    [DbContext(typeof(ForumContext))]
    partial class ForumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccount");

                    b.HasIndex("AccountTypeId")
                        .IsUnique();

                    b.ToTable("ForumAccount", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccountType");

                    b.ToTable("ForumAccountType", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForumSubTitle")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumBase");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumBase", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(3143),
                            ForumCategoryId = 1,
                            ForumSubTitle = "Test forum subtitle 1",
                            ForumTitle = "Test forum title 1",
                            ForumUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(3145),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 2",
                            ForumTitle = "Test forum title 2",
                            ForumUserId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumCategory");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 584, DateTimeKind.Local).AddTicks(9608),
                            ForumUserId = 1,
                            Name = "Test subtopic 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 584, DateTimeKind.Local).AddTicks(9610),
                            ForumUserId = 2,
                            Name = "Test subtopic 2"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumPost");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumPost", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(8267),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            PostName = "Post name 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(8272),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 2"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("TopicViewCounter")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumTopic");

                    b.HasIndex("ForumBaseId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumTopic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(6475),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 585, DateTimeKind.Local).AddTicks(6481),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 2",
                            TopicViewCounter = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("Karma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Surname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumUser");

                    b.ToTable("ForumUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 584, DateTimeKind.Local).AddTicks(5834),
                            Karma = 0,
                            Lastname = "Сергеевич",
                            Name = "Константин",
                            Surname = "Феофанов"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 19, 13, 54, 55, 584, DateTimeKind.Local).AddTicks(5848),
                            Karma = 0,
                            Lastname = "Григорьевич",
                            Name = "Александр",
                            Surname = "Петров"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f6a640bd-8a3c-4993-80b8-79f3f9922021",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "6d993ac8-13f9-40a9-94b9-bf0a75725563",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumAccountType", "ForumAccountType")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumAccountType_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumUser_Id");

                    b.Navigation("ForumAccountType");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumCategory", "ForumCategory")
                        .WithMany("ForumBases")
                        .HasForeignKey("ForumCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumBase_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumUser_Id");

                    b.Navigation("ForumCategory");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumUser_Id");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumPost_ForumTopicId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumPost_ForumUser_Id");

                    b.Navigation("ForumTopic");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumBase", "ForumBase")
                        .WithMany("ForumTopics")
                        .HasForeignKey("ForumBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumTopic_ForumBaseId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumUser_Id");

                    b.Navigation("ForumBase");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Navigation("ForumTopics");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Navigation("ForumBases");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
