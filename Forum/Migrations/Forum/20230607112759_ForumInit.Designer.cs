// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Forum.Migrations.Forum
{
    [DbContext(typeof(ForumContext))]
    [Migration("20230607112759_ForumInit")]
    partial class ForumInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cabinet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2051629d-cd21-4957-b873-bea51d29f7fd",
                            AccessFailedCount = 0,
                            BirthDate = "27.02.2003 0:00:00",
                            Cabinet = "944",
                            ConcurrencyStamp = "d139137b-1213-4f4b-b164-576de7c63e97",
                            Email = "G600-U0@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan0",
                            InternalPhone = "510880872",
                            LastName = "Petrov0",
                            LockoutEnabled = false,
                            PhoneNumber = "165798383316823993401248649137",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d73fd23-7cad-4833-a660-726354a5de8d",
                            TwoFactorEnabled = false,
                            UserName = "G600-U0"
                        },
                        new
                        {
                            Id = "d3080321-63ab-48bd-a275-c93067ba2f9d",
                            AccessFailedCount = 0,
                            BirthDate = "22.03.1995 0:00:00",
                            Cabinet = "611",
                            ConcurrencyStamp = "d33d008c-4afa-4ca1-abdc-5dad06b830c1",
                            Email = "G600-U1@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan1",
                            InternalPhone = "1533230432",
                            LastName = "Petrov1",
                            LockoutEnabled = false,
                            PhoneNumber = "15462945076167369451003679898",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32a514cd-a2f3-449c-9d78-4d153b42d9ef",
                            TwoFactorEnabled = false,
                            UserName = "G600-U1"
                        },
                        new
                        {
                            Id = "61c0264e-2363-4d0a-b5ac-87403dd07e70",
                            AccessFailedCount = 0,
                            BirthDate = "10.07.2014 0:00:00",
                            Cabinet = "708",
                            ConcurrencyStamp = "b18b2c41-2c4f-445d-abae-6922a5e6c17c",
                            Email = "G600-U2@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan2",
                            InternalPhone = "710640452",
                            LastName = "Petrov2",
                            LockoutEnabled = false,
                            PhoneNumber = "145491056521403737292000233159",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2aa278f-5297-4d86-ac01-b57601f422e3",
                            TwoFactorEnabled = false,
                            UserName = "G600-U2"
                        },
                        new
                        {
                            Id = "c6a32867-0013-49ec-a6d4-267cab546c28",
                            AccessFailedCount = 0,
                            BirthDate = "27.09.1999 0:00:00",
                            Cabinet = "494",
                            ConcurrencyStamp = "c2a68e28-7f07-464d-b5aa-38724479d150",
                            Email = "G600-U3@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan3",
                            InternalPhone = "1182277290",
                            LastName = "Petrov3",
                            LockoutEnabled = false,
                            PhoneNumber = "160407655250136365662063529",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c896025-638a-4ecd-a9ed-59072b7f299f",
                            TwoFactorEnabled = false,
                            UserName = "G600-U3"
                        },
                        new
                        {
                            Id = "5540e31c-a272-4430-bcaa-6b0fe7f3ba14",
                            AccessFailedCount = 0,
                            BirthDate = "19.12.2008 0:00:00",
                            Cabinet = "274",
                            ConcurrencyStamp = "d333167c-bc5f-46ec-95ff-363528268080",
                            Email = "G600-U4@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan4",
                            InternalPhone = "713308458",
                            LastName = "Petrov4",
                            LockoutEnabled = false,
                            PhoneNumber = "639887927299758158787109123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb6af019-e5d2-438e-a511-461e64bb43b5",
                            TwoFactorEnabled = false,
                            UserName = "G600-U4"
                        },
                        new
                        {
                            Id = "2f575a2d-61b3-4653-bfad-65d333d0ea13",
                            AccessFailedCount = 0,
                            BirthDate = "28.08.1999 0:00:00",
                            Cabinet = "42",
                            ConcurrencyStamp = "25a94e93-8c43-4d78-aaa5-95927224b0f1",
                            Email = "G600-U5@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan5",
                            InternalPhone = "1597133684",
                            LastName = "Petrov5",
                            LockoutEnabled = false,
                            PhoneNumber = "87235371219028021411896607617",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55c67cfd-e1cf-4ed0-93e8-537680dc7c0c",
                            TwoFactorEnabled = false,
                            UserName = "G600-U5"
                        },
                        new
                        {
                            Id = "3def3a5b-e1c0-4478-b96f-aeb466648e93",
                            AccessFailedCount = 0,
                            BirthDate = "12.10.2017 0:00:00",
                            Cabinet = "501",
                            ConcurrencyStamp = "7a1a83d8-19fe-4218-b5c9-25fb146b4ae6",
                            Email = "G600-U6@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan6",
                            InternalPhone = "1675750551",
                            LastName = "Petrov6",
                            LockoutEnabled = false,
                            PhoneNumber = "16240580326863728211566808264",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c63caf56-12bf-430c-a4dd-001805eedc6f",
                            TwoFactorEnabled = false,
                            UserName = "G600-U6"
                        },
                        new
                        {
                            Id = "5bd28483-9902-433f-9ab1-08d3092868b5",
                            AccessFailedCount = 0,
                            BirthDate = "14.02.2018 0:00:00",
                            Cabinet = "652",
                            ConcurrencyStamp = "f0505d66-df5a-4e9e-9c96-3387a6722cad",
                            Email = "G600-U7@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan7",
                            InternalPhone = "739485146",
                            LastName = "Petrov7",
                            LockoutEnabled = false,
                            PhoneNumber = "2023733221725847308564151679",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34168875-c398-4935-b05f-b955823e1d07",
                            TwoFactorEnabled = false,
                            UserName = "G600-U7"
                        },
                        new
                        {
                            Id = "05e25060-21c8-4fe9-8d81-bd4195c27a96",
                            AccessFailedCount = 0,
                            BirthDate = "18.07.2004 0:00:00",
                            Cabinet = "893",
                            ConcurrencyStamp = "b8d48635-5d10-4094-9fd9-a801f61d154d",
                            Email = "G600-U8@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan8",
                            InternalPhone = "471448790",
                            LastName = "Petrov8",
                            LockoutEnabled = false,
                            PhoneNumber = "4268934912581328972106156656",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "751317e5-8024-4b3a-8d7a-aac0038b6e73",
                            TwoFactorEnabled = false,
                            UserName = "G600-U8"
                        },
                        new
                        {
                            Id = "06153dd3-5953-46da-a5e6-e945fb079c83",
                            AccessFailedCount = 0,
                            BirthDate = "24.01.2012 0:00:00",
                            Cabinet = "449",
                            ConcurrencyStamp = "a9a3b304-1931-42ed-95de-7dad707d0a6f",
                            Email = "G600-U9@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan9",
                            InternalPhone = "534488241",
                            LastName = "Petrov9",
                            LockoutEnabled = false,
                            PhoneNumber = "3232679242136176489392680665",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3979954f-6771-4d5a-9e69-72ef023970f0",
                            TwoFactorEnabled = false,
                            UserName = "G600-U9"
                        },
                        new
                        {
                            Id = "9dfb2e14-d57e-4b79-81b7-1cf4ae01b948",
                            AccessFailedCount = 0,
                            BirthDate = "11.02.2003 0:00:00",
                            Cabinet = "695",
                            ConcurrencyStamp = "3d98ffa6-4513-447d-8f14-d8b310a30711",
                            Email = "G600-U10@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan10",
                            InternalPhone = "540809420",
                            LastName = "Petrov10",
                            LockoutEnabled = false,
                            PhoneNumber = "932750206204460584438780434",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d3cf709-007c-452e-8260-8ed635bb6763",
                            TwoFactorEnabled = false,
                            UserName = "G600-U10"
                        },
                        new
                        {
                            Id = "d88220a3-fa85-4b2d-b027-5b0b39e7dc15",
                            AccessFailedCount = 0,
                            BirthDate = "13.03.2023 0:00:00",
                            Cabinet = "554",
                            ConcurrencyStamp = "b6803a45-3605-4fa1-a46b-f25132ffab93",
                            Email = "G600-U11@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan11",
                            InternalPhone = "1634898877",
                            LastName = "Petrov11",
                            LockoutEnabled = false,
                            PhoneNumber = "7425950798067706461553283657",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47e4ffbf-e142-40c0-8b80-fb5cfa2cb352",
                            TwoFactorEnabled = false,
                            UserName = "G600-U11"
                        },
                        new
                        {
                            Id = "ca943fe5-6365-43d5-b5b5-1a7b303971bf",
                            AccessFailedCount = 0,
                            BirthDate = "05.05.2015 0:00:00",
                            Cabinet = "338",
                            ConcurrencyStamp = "08007ee7-ad18-487b-9937-2c56d2b38cc8",
                            Email = "G600-U12@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan12",
                            InternalPhone = "883661659",
                            LastName = "Petrov12",
                            LockoutEnabled = false,
                            PhoneNumber = "2660345191505330144138227614",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46286871-8a4c-40f7-9b75-fbd3605e666b",
                            TwoFactorEnabled = false,
                            UserName = "G600-U12"
                        },
                        new
                        {
                            Id = "2ebf472b-a36c-44c5-81ab-13e130048ccc",
                            AccessFailedCount = 0,
                            BirthDate = "11.11.1995 0:00:00",
                            Cabinet = "261",
                            ConcurrencyStamp = "c798940e-1c90-41b6-8e8a-486439b35d6f",
                            Email = "G600-U13@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan13",
                            InternalPhone = "1849837374",
                            LastName = "Petrov13",
                            LockoutEnabled = false,
                            PhoneNumber = "2087792787212148135325682582",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "595b78d7-89b3-44d0-a5cb-ec320b1e06b1",
                            TwoFactorEnabled = false,
                            UserName = "G600-U13"
                        },
                        new
                        {
                            Id = "a8fb1302-24fa-43b5-98df-6fb95aff55c8",
                            AccessFailedCount = 0,
                            BirthDate = "23.08.1995 0:00:00",
                            Cabinet = "53",
                            ConcurrencyStamp = "5eb51220-af58-4718-b801-3f8be997d843",
                            Email = "G600-U14@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan14",
                            InternalPhone = "918888906",
                            LastName = "Petrov14",
                            LockoutEnabled = false,
                            PhoneNumber = "16123261541314336666792912724",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a70d728d-6845-41cb-a611-cac1d81da2da",
                            TwoFactorEnabled = false,
                            UserName = "G600-U14"
                        },
                        new
                        {
                            Id = "448b10cc-ce98-4e22-a0bd-d8c1a414df09",
                            AccessFailedCount = 0,
                            BirthDate = "24.05.2016 0:00:00",
                            Cabinet = "4",
                            ConcurrencyStamp = "6eb75546-3eac-4885-a2f1-057a46b6aa67",
                            Email = "G600-U15@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan15",
                            InternalPhone = "338138003",
                            LastName = "Petrov15",
                            LockoutEnabled = false,
                            PhoneNumber = "631858564583048892503024912",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9889ed97-ebb3-4d81-a59f-9e00449d7f85",
                            TwoFactorEnabled = false,
                            UserName = "G600-U15"
                        },
                        new
                        {
                            Id = "b22e995d-d3c2-4319-9df6-c8af8e86141a",
                            AccessFailedCount = 0,
                            BirthDate = "16.05.2009 0:00:00",
                            Cabinet = "436",
                            ConcurrencyStamp = "a3e334e5-c97b-4bfd-94d6-044872dba16e",
                            Email = "G600-U16@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan16",
                            InternalPhone = "1949770999",
                            LastName = "Petrov16",
                            LockoutEnabled = false,
                            PhoneNumber = "212318729314521436471452845729",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b787661-3c4c-4967-84a7-cfa353dfcd55",
                            TwoFactorEnabled = false,
                            UserName = "G600-U16"
                        },
                        new
                        {
                            Id = "beeeea72-546a-48b0-b5dd-6ec5bf0805b2",
                            AccessFailedCount = 0,
                            BirthDate = "26.08.2000 0:00:00",
                            Cabinet = "90",
                            ConcurrencyStamp = "cbc7ee96-ae7a-45d8-81fa-5e42313bce78",
                            Email = "G600-U17@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan17",
                            InternalPhone = "724819791",
                            LastName = "Petrov17",
                            LockoutEnabled = false,
                            PhoneNumber = "13667334742076341070264848158",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "887676ac-f5fd-49d4-8642-d57034c0072f",
                            TwoFactorEnabled = false,
                            UserName = "G600-U17"
                        },
                        new
                        {
                            Id = "9928ee03-ae3e-442e-bd76-e2ed34c4ca6d",
                            AccessFailedCount = 0,
                            BirthDate = "07.05.1999 0:00:00",
                            Cabinet = "471",
                            ConcurrencyStamp = "42cafacd-8ef9-4ce5-ab36-e0886876c6bb",
                            Email = "G600-U18@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan18",
                            InternalPhone = "419803303",
                            LastName = "Petrov18",
                            LockoutEnabled = false,
                            PhoneNumber = "42646577719195852811967974044",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96788635-44af-4951-818e-cc98f3c852fa",
                            TwoFactorEnabled = false,
                            UserName = "G600-U18"
                        },
                        new
                        {
                            Id = "a1e75877-9159-4701-8c3f-4d12bbdf857c",
                            AccessFailedCount = 0,
                            BirthDate = "04.06.2014 0:00:00",
                            Cabinet = "673",
                            ConcurrencyStamp = "bfdc5974-8a2d-41f9-9103-5dc68f6cd323",
                            Email = "G600-U19@mfrb.by",
                            EmailConfirmed = false,
                            FirstName = "Ivan19",
                            InternalPhone = "2121212778",
                            LastName = "Petrov19",
                            LockoutEnabled = false,
                            PhoneNumber = "13784092032079354949378881090",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a87b3553-1f35-4c42-9d21-cbc683691d00",
                            TwoFactorEnabled = false,
                            UserName = "G600-U19"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccount");

                    b.HasIndex("AccountTypeId")
                        .IsUnique();

                    b.ToTable("ForumAccount", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id")
                        .HasName("PK_ForumAccountType");

                    b.ToTable("ForumAccountType", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForumSubTitle")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumBase");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumBase", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5713),
                            ForumCategoryId = 1,
                            ForumSubTitle = "Test forum subtitle 1",
                            ForumTitle = "Test forum title 1",
                            ForumUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5716),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 2",
                            ForumTitle = "Test forum title 2",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5718),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 3",
                            ForumTitle = "Test forum title 3",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5719),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 4",
                            ForumTitle = "Test forum title 4",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5721),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 5",
                            ForumTitle = "Test forum title 5",
                            ForumUserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(5722),
                            ForumCategoryId = 2,
                            ForumSubTitle = "Test forum subtitle 6",
                            ForumTitle = "Test forum title 6",
                            ForumUserId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumCategory");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2401),
                            ForumUserId = 1,
                            Name = "Test category 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2403),
                            ForumUserId = 2,
                            Name = "Test category 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2404),
                            ForumUserId = 1,
                            Name = "Test category 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2405),
                            ForumUserId = 2,
                            Name = "Test category 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2406),
                            ForumUserId = 2,
                            Name = "Test category 5"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(2407),
                            ForumUserId = 2,
                            Name = "Test category 6"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostName")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumPost");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumPost", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 884, DateTimeKind.Local).AddTicks(733),
                            ForumTopicId = 1,
                            ForumUserId = 1,
                            Likes = 1,
                            PostName = "Post name 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 884, DateTimeKind.Local).AddTicks(738),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 884, DateTimeKind.Local).AddTicks(740),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            PostName = "Post name 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 884, DateTimeKind.Local).AddTicks(741),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 34,
                            PostName = "Post name 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 884, DateTimeKind.Local).AddTicks(742),
                            ForumTopicId = 2,
                            ForumUserId = 2,
                            Likes = 65,
                            PostName = "Post name 5"
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("Date");

                    b.Property<int>("ForumBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForumUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("TopicViewCounter")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumTopic");

                    b.HasIndex("ForumBaseId");

                    b.HasIndex("ForumUserId");

                    b.ToTable("ForumTopic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(8886),
                            ForumBaseId = 1,
                            ForumUserId = 1,
                            Name = "Test forum topic 1",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(8892),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 2",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(8893),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 3",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(8894),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 4",
                            TopicViewCounter = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 883, DateTimeKind.Local).AddTicks(8895),
                            ForumBaseId = 2,
                            ForumUserId = 2,
                            Name = "Test forum topic 5",
                            TopicViewCounter = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("Karma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Lastname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Surname")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_ForumUser");

                    b.ToTable("ForumUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 882, DateTimeKind.Local).AddTicks(8098),
                            Karma = 0,
                            Lastname = "Сергеевич",
                            Name = "Константин",
                            Surname = "Феофанов"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 7, 14, 27, 58, 882, DateTimeKind.Local).AddTicks(8110),
                            Karma = 0,
                            Lastname = "Григорьевич",
                            Name = "Александр",
                            Surname = "Петров"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5b81f2dc-064c-4328-88bd-68aa490af914",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8f3a0e3f-405a-4a84-8072-b20bceecbbd0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccount", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumAccountType", "ForumAccountType")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumAccountType_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithOne("ForumAccount")
                        .HasForeignKey("Entities.Models.Forum.ForumAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumAccount_ForumUser_Id");

                    b.Navigation("ForumAccountType");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumCategory", "ForumCategory")
                        .WithMany("ForumBases")
                        .HasForeignKey("ForumCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumBase_Id");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumUser_Id");

                    b.Navigation("ForumCategory");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumCategory_ForumUser_Id");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumPost", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumTopic", "ForumTopic")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumTopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumPost_ForumTopicId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumPost_ForumUser_Id");

                    b.Navigation("ForumTopic");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.HasOne("Entities.Models.Forum.ForumBase", "ForumBase")
                        .WithMany("ForumTopics")
                        .HasForeignKey("ForumBaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumBase_ForumTopic_ForumBaseId");

                    b.HasOne("Entities.Models.Forum.ForumUser", "ForumUser")
                        .WithMany()
                        .HasForeignKey("ForumUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ForumTopic_ForumUser_Id");

                    b.Navigation("ForumBase");

                    b.Navigation("ForumUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumAccountType", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumBase", b =>
                {
                    b.Navigation("ForumTopics");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumCategory", b =>
                {
                    b.Navigation("ForumBases");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumTopic", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("Entities.Models.Forum.ForumUser", b =>
                {
                    b.Navigation("ForumAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
